{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d101db4c_fff4d01d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-11T19:37:22Z",
      "side": 1,
      "message": "Healthcheck should be lightweight and not modifying anything on the data: reindexing a change is going against the concept of a healthcheck.\n\nCan we have a discussion on it?\n\nAdding a Code-Review -2 to avoid anyone merging this as it could be harmful.",
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f162574_a0eceffc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/ChangeIndexHealthCheck.java",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T18:09:19Z",
      "side": 1,
      "message": "I must admit I don\u0027t know much about how you can check if the index is operable, but IMHO the healthcheck should never introduce side-effects, as it\u0027s doing here.",
      "range": {
        "startLine": 81,
        "startChar": 39,
        "endLine": 81,
        "endChar": 50
      },
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b33baa05_9d3487b2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/ChangeIndexHealthCheck.java",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T18:09:19Z",
      "side": 1,
      "message": "what is the oneOffCtx and why do we need it? The `ctx` is never used.",
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "304f8048_c467fd90",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/ChangeIndexHealthCheck.java",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T18:09:19Z",
      "side": 1,
      "message": "I think what happens when no changes exist should be configurable, as different users might have different opinions on whether the instance is healthy. But that could be a follow up change.",
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4fdc850_7f08d3b9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/ChangeIndexHealthCheck.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T18:09:19Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to catch any exceptions and return a Result.FAILED? This way, you can actually",
      "range": {
        "startLine": 93,
        "startChar": 28,
        "endLine": 93,
        "endChar": 33
      },
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3595fc13_dd9f67cf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/ChangeIndexHealthCheck.java",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-11T18:09:19Z",
      "side": 1,
      "message": "can we pass something other than `null`, it freaks me out ðŸ˜Š\nMaybe `TopLevelResource.INSTANCE`? WDYT?",
      "range": {
        "startLine": 106,
        "startChar": 49,
        "endLine": 106,
        "endChar": 53
      },
      "revId": "739a38e51d0d9556823c34a9217925dec16df637",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "739a38e51d0d9556823c34a9217925dec16df637",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "739a38e51d0d9556823c34a9217925dec16df637",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "739a38e51d0d9556823c34a9217925dec16df637",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "739a38e51d0d9556823c34a9217925dec16df637",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "739a38e51d0d9556823c34a9217925dec16df637",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}