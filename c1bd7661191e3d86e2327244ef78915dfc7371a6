{
  "comments": [
    {
      "key": {
        "uuid": "fd331ee2_c04610d7",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "AbstractWorkersHealthCheck?",
      "range": {
        "startLine": 23,
        "startChar": 22,
        "endLine": 23,
        "endChar": 42
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa30fc1_2b658058",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "nit: empty line",
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e528add9_71c8778f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "This is a constant value: it would be easier to just pass the value in the constructor, store it in a final field and then use it internally.",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 41
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d61caa23_99e0c3dc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "This value can be calculated and is known at object injection time: it can be computed by the superclass and passed upstream in the constructor. There is no need to have an abstract method with a subclass override.",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 43
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7887d851_e996a3de",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "This is always set as:\n  this.threshold \u003d healthCheckConfig.getActiveWorkersThreshold(name);\n\nIt can therefore just calculated in the constructor and not delegated to the parent class.",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 41
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7636f7f9_97ed60d8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/healthcheck/check/AbstractWorkersCheck.java",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "You have value already, and therefore you can:\n\n  ((Integer) value).longValue()",
      "range": {
        "startLine": 61,
        "startChar": 26,
        "endLine": 61,
        "endChar": 49
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99b02174_93a52c8c",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "considered",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 12
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f2430d_edef2316",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/healthcheck/HttpActiveWorkersCheckTest.java",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "It would be best to calculate this value in a more readable way: we want to say that when the value is less than 50% of the maxThreads, then is passed.\n\nint thresholdPerc \u003d 50;\nint maxThreads \u003d 12;\nint usedThreads \u003d maxThreads * thresholdPerc / 100 - 1",
      "range": {
        "startLine": 39,
        "startChar": 61,
        "endLine": 39,
        "endChar": 62
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fba61d6_94ed2c6b",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/healthcheck/HttpActiveWorkersCheckTest.java",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "It would be best to calculate this value in a more readable way: we want to say that when the value is more than 50% of the maxThreads, then is failed.\n\nint thresholdPerc \u003d 50;\nint maxThreads \u003d 12;\nint usedThreads \u003d maxThreads * thresholdPerc / 100 + 1",
      "range": {
        "startLine": 55,
        "startChar": 61,
        "endLine": 55,
        "endChar": 62
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "026160e8_c3eaadaa",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/healthcheck/HttpActiveWorkersCheckTest.java",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-16T10:52:40Z",
      "side": 1,
      "message": "Those two tests are pretty much duplicates of the previous ones: can we just test the default value instead?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 93,
        "endChar": 3
      },
      "revId": "c1bd7661191e3d86e2327244ef78915dfc7371a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}